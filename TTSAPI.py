import requests
import time


class Convert:
    def __init__(self, api_key):
        self.url = 'https://large-text-to-speech.p.rapidapi.com/tts'
        self.key = api_key

    def convert(self, text):
        """Receives a string to be converted to speech.
        Returns an error in case of an error with the HTTP request,
        or else it returns the estimated time to completion
        and assigns an id to the conversion."""

        payload = {
            'text': text,
        }

        headers = {
            'content-type': 'application/json',
            'X-RapidAPI-Key': self.key,
            'X-RapidAPI-Host': 'large-text-to-speech.p.rapidapi.com',
        }

        response = requests.post(self.url, json=payload, headers=headers)
        response.raise_for_status()
        data = response.json()
        conversion_id = data['id']

        self.get_status(conversion_id)

    def get_status(self, conversion_id):
        """Utilizes the id generated by the conversion to query for status.
        Returns an error in case of an error with the conversion,
        or else it returns the estimated time to completion or the URL to download the generated file."""

        querystring = {'id': conversion_id}

        headers = {
            'X-RapidAPI-Key': self.key,
            'X-RapidAPI-Host': 'large-text-to-speech.p.rapidapi.com'
        }

        response = requests.get(self.url, headers=headers, params=querystring)
        response.raise_for_status()
        data = response.json()

        if data['status'] == 'fail':
            return print("Conversion failed. Please, try again.")
        else:
            try:
                url = data['url']
                return print(f"Conversion complete: {url}")
            except KeyError:
                print(
                    f"Estimated time to completion: {data['eta']} seconds\n"
                    f"Your conversion id is: {conversion_id}\n"
                    f"Please, wait for your conversion to be finished..."
                )

                time.sleep(int(data['eta']))

                return self.get_status(conversion_id)
